import React, { useState } from "react";
import Breadcrumbs from "../../Components/Breadcrumbs";
import { useNavigate } from "react-router-dom";

const AddressForm = () => {


  const navigate = useNavigate();

  const Next = () => {
    navigate("/AccountForm");
  };

  const [country, setCountry] = useState("");
  const [states, setStates] = useState([]);
  const [state, setState] = useState("");
  const [areas, setAreas] = useState([]);

  const countryOptions = {
    Nigerian: {
      states: ["Lagos", "Abuja", "Kano", "Rivers"],
      areas: {
        Lagos: ["Ikeja", "Surulere", "Lekki", "Yaba"],
        Abuja: ["Garki", "Asokoro", "Maitama", "Wuse"],
        Kano: ["Nassarawa", "Fagge", "Tarauni", "Ungogo"],
        Rivers: ["Port Harcourt", "Obio-Akpor", "Bonny", "Degema"],
      },
    },
    // USA: {
    //   states: ["California", "Texas", "Florida", "New York"],
    //   areas: {
    //     California: ["Los Angeles", "San Francisco", "San Diego", "Sacramento"],
    //     Texas: ["Houston", "Austin", "Dallas", "San Antonio"],
    //     Florida: ["Miami", "Orlando", "Tampa", "Tallahassee"],
    //     "New York": ["Manhattan", "Brooklyn", "Queens", "Bronx"] // No trailing comma here
    //   },
    // },
    // India: {
    //   states: ["Delhi", "Mumbai", "Bangalore", "Chennai"],
    //   areas: {
    //     Delhi: ["South Delhi", "Rohini", "Dwarka", "Karol Bagh"],
    //     Mumbai: ["Andheri", "Bandra", "Colaba", "Goregaon"],
    //     Bangalore: ["Whitefield", "Koramangala", "Indiranagar", "Jayanagar"],
    //     Chennai: ["T. Nagar", "Velachery", "Adyar", "Anna Nagar"],
    //   },
    // },
  };

  const handleCountryChange = (e) => {
    const selectedCountry = e.target.value;
    setCountry(selectedCountry);
    setStates(countryOptions[selectedCountry]?.states || []);
    setState(""); // Reset state selection
    setAreas([]); // Reset areas
  };

  const handleStateChange = (e) => {
    const selectedState = e.target.value;
    setState(selectedState);
    setAreas(countryOptions[country]?.areas[selectedState] || []);
  };

  return (
    <div className="bg-[#F2F0F1] min-h-screen">
  <div className="formatter">
    <div className="py-6"> {/* Reduced padding */}
      <Breadcrumbs />
    <div className="flex items-center justify-center">
      <div className="bg-white rounded-lg p-10 mb-6 mt-4 w-full max-w-full">
        {/* <h1 className="text-red-500 font-bold text-left text-3xl mb-6">
          Address Information
        </h1> */}
        <h1 className="text-left text-4xl mb-4 font-bold text-maroon"> {/* Reduced margin */}
        Address Information
          </h1>
        <form className="space-y-6">
          {/* Row 1: Country and State */}
          <div className="flex space-x-6">
            {/* Select Country */}
            <select
              value={country}
              onChange={handleCountryChange}
              className="flex-1 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50"
            >
              <option value="">Select Country</option>
              <option value="Nigerian">Nigerian</option>
              {/* <option value="USA">USA</option>
              <option value="India">India</option> */}
            </select>
            {/* Select State */}
            <select
              value={state}
              onChange={handleStateChange}
              className="flex-1 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50"
              disabled={!states.length}
            >
              <option value="">
                {states.length ? "Select State" : "Select Country First"}
              </option>
              {states.map((state, index) => (
                <option key={index} value={state}>
                  {state}
                </option>
              ))}
            </select>
          </div>
          {/* Row 2: Area */}
          <div>
          <select
  className="state-area p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 w-full sm:w-96 md:w-[648px] lg:w-[648px]"
  disabled={!areas.length}
>
  <option value="">
    {areas.length ? "Select Area" : "Select State First"}
  </option>
  {areas.map((area, index) => (
    <option key={index} value={area}>
      {area}
    </option>
  ))}
</select>

          </div>
          {/* Row 3: Complete Address */}
          <div>
            <textarea
              placeholder="Enter complete address here."
              className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 resize-none h-32"
            ></textarea>
          </div>
                        <button
              onClick={Next}
                type="button"
                className="px-20 py-4 bg-gradient-to-br from-[#5e1a28] to-[#e65471] text-white rounded-full focus:outline-none hover:from-maroon hover:to-maroon"
              >
                Next
              </button>
        </form>
      </div>
    </div>
    </div>
    </div>
    </div>
  );
};

export default AddressForm;


//New Code 
import { useState, useEffect } from "react";
import Breadcrumbs from "../../Components/Breadcrumbs";
import { useNavigate } from "react-router-dom";
import { current } from '../../utils';

const AddressForm = () => {
  // ... (keep all your existing state declarations)
    // State management for form fields
  const [country, setCountry] = useState("");
  const [countryStates, setCountryStates] = useState([]); // Stores list of states
  const [state, setState] = useState(""); // Currently selected state
  const [areas, setAreas] = useState([]); // Stores list of areas for selected state
  const [selectedArea, setSelectedArea] = useState(""); // Currently selected area
  const [completeAddress, setCompleteAddress] = useState("");
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  // ========== STATE AND AREA SELECTION LOGIC ========== //
  const runFetch = async (state = null) => {
    // Determine endpoint based on whether we're fetching states or cities
    let endpoint = state ? `${current}misc/cities/${state}` : `${current}misc/states`;
    
    try {
      const response = await fetch(endpoint, {
        method: "GET",
        credentials: "include",
      });
      
      if (!response.ok) throw new Error(await response.text());
      const resp = await response.json();
      return resp.data || resp;
    } catch (error) {
      setError("Failed to load location data");
      return null;
    }
  };

  // Load states when component mounts
  useEffect(() => {
    const fetchStates = async () => {
      const states = await runFetch();
      if (states) setCountryStates(states);
    };
    fetchStates();
  }, []);

  // When state changes, load its corresponding areas
  const handleStateChange = async (e) => {
    const selectedState = e.target.value;
    setState(selectedState);
    setSelectedArea(""); // Reset area selection when state changes
    setError(null);
    
    if (selectedState) {
      const cities = await runFetch(selectedState);
      if (cities) setAreas(cities);
    } else {
      setAreas([]);
    }
  };

  // ========== ADDRESS API INTEGRATION ========== //
  const updateAddress = async (addressData) => {
    try {
      // Get token from where you store it (localStorage, cookies, etc.)
      const token = localStorage.getItem('authToken') || sessionStorage.getItem('authToken');
      
      if (!token) {
        throw new Error("No authentication token found");
      }

      const response = await fetch("https://api-auctora.vercel.app/api/users/update_address", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${token}`  // Add the authorization header
        },
        credentials: "include",
        body: JSON.stringify(addressData)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to update address");
      }

      return await response.json();
    } catch (error) {
      console.error("API Error:", error);
      throw error;
    }
  };
  // ========== END ADDRESS API INTEGRATION ========== //

  const handleSubmit = async (e) => {
    e.preventDefault();
    // Validate all fields are filled
    if (!country || !state || !selectedArea || !completeAddress.trim()) {
      setError("Please fill in all address fields");
      return;
    }

    // Prepare data for API
    const addressData = {
      country,
      state,
      city: selectedArea, // Using selectedArea as city
      address: completeAddress
    };

    try {
      await updateAddress(addressData);
      navigate("/AccountForm");
    } catch (error) {
      // More specific error handling
      if (error.message.includes("Unauthenticated")) {
        setError("Please login to save your address");
      } else {
        setError(error.message || "Failed to save address. Please try again.");
      }
    }
  };

  const handleCountryChange = (e) => {
    setCountry(e.target.value);
    setState("");
    setAreas([]);
    setSelectedArea("");
    setError(null);
  };

  return (
    <div className="bg-[#F2F0F1] min-h-screen">
      <div className="formatter">
        <div className="py-6">
          <Breadcrumbs />
          <div className="flex items-center justify-center">
            <div className="bg-white rounded-lg p-10 mb-6 mt-4 w-full max-w-full">
              <h1 className="text-left text-4xl mb-4 font-bold text-maroon">
                Address Information
              </h1>
              
              {error && <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">{error}</div>}
              
              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="flex flex-col md:flex-row gap-6">
                  {/* Country Selection */}
                  <div className="flex-1">
                    <select
                      value={country}
                      onChange={handleCountryChange}
                      className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                      required
                    >
                      <option value="">Select Country</option>
                      <option value="Nigerian">Nigeria</option>
                    </select>
                  </div>
                  
                  {/* State Selection - loads when country is selected */}
                  <div className="flex-1">
                    <select
                      value={state}
                      onChange={handleStateChange}
                      className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                      disabled={!country}
                      required
                    >
                      <option value="">Select State</option>
                      {countryStates.map((state, index) => (
                        <option key={index} value={state}>{state}</option>
                      ))}
                    </select>
                  </div>
                </div>
                
                {/* Area Selection - loads when state is selected */}
                <div>
                  <select
                    value={selectedArea}
                    onChange={(e) => setSelectedArea(e.target.value)}
                    className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                    disabled={!state}
                    required
                  >
                    <option value="">Select Area</option>
                    {areas.map((area, index) => (
                      <option key={index} value={area}>{area}</option>
                    ))}
                  </select>
                </div>
                
                {/* Complete Address Field */}
                <div>
                  <textarea
                    value={completeAddress}
                    onChange={(e) => setCompleteAddress(e.target.value)}
                    placeholder="Enter complete address here."
                    className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 resize-none h-32"
                    required
                    minLength={10}
                  />
                </div>
                
                <button
                  type="submit"
                  className="px-20 py-4 bg-gradient-to-br from-[#5e1a28] to-[#e65471] text-white rounded-full focus:outline-none hover:from-maroon hover:to-maroon"
                >
                  Next
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

};

export default AddressForm;